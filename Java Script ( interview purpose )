

****************************************************************** What is JavaScript programming language? **************************************************************


The programs in this language are called scripts.

They can be written right in a web page’s HTML and run automatically as the page loads.

Scripts are provided and executed as plain text.

JS is a Synchronus langauge ( Line by line ) and single threded langauge (which means only one statement is executed at a time.).

JS is a Dynamic langauge (Being able to change the underlying type of a variable while the program is running without causing an error 
is what makes JavaScript a dynamic language. This behavior comes with both benefits and drawbacks. that means in js we don't need to define type of variable like 
int, float etc and here we can reasign values).

They don’t need special preparation or compilation to run.
In this aspect, JavaScript is very different from another language called Java.

The first JavaScript engine was created by Brendan Eich in 1995 for the Netscape Navigator web browser.
It was a rudimentary interpreter for the nascent language Eich invented.(This evolved into the SpiderMonkey engine, still used by the Firefox browser.)


****************************************************************************** Environment *****************************************************************************


Node.js -->>
            Node.js is an open source server environment
            Node.js is free
            Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
            Node.js uses JavaScript on the server
            Node.js is a server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). 
            Node.js was developed by Ryan Dahl in 2009 and its latest version is v0.10.36.  
            Node.js = Runtime Environment + JavaScript Library
            Node.js applications are written in JavaScript, and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux.
            Node.js also provides a rich library of various JavaScript modules which simplifies the development of web applications using Node.js to a great extent.
            
Where Not to Use Node.js? -->>
            It is not advisable to use Node.js for CPU intensive applications.


            
****************************************************************************** JS engins *********************************************************************************


A JavaScript engine is a software component that executes JavaScript code.
V8 from Google is the most used JavaScript engine.
The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance.
JavaScript engines are embedded in browsers and web servers, such as Node.js to allow run-time compilation and execution of JavaScript code. 
Google’s V8: It is an open-source JavaScript engine that was developed by The Chromium Project for Google Chrome and Chromium web browsers.
different browser have their own js engins -->> 
                                              Chrome - V8
                                              Firefox - Spider Monkey
                                              Internet Explorer - Chakra


****************************************************************************** JS variable ******************************************************************************


JavaScript variables are containers for storing data values. 
First the variable is initialized automatically by Undefined.

variable declaration with VAR -->> (var a =  2)
                             var keyword has many problems -->> 
                                    1) It can accidentally overwrite an existing global variable(that means we can redeclare a single var many times).
                                    2) Function scoping and block scoping ( that means it can be dangerous that we can access and redeclare variable ,
                                       we can print the value of variable which is in loop or control statement or function ).


variable declaration with LET -->> (let a = 2)
                              Doesn't allow redeclaration of variables.


variable declaration with CONST -->> (const a = 2)




******************************************************************************** Loop *********************************************************************************


The JavaScript loops are used to iterate the piece of code using for, while, do while or for-in loops. 
It makes the code compact. It is mostly used in array.

There are four types of loops in JavaScript.
1). for loop -->> The JavaScript for loop iterates the elements for the fixed number of times. It should be used if number of iteration is known.
                  for (initialization; condition; increment){  
                      code to be executed  
                  }  

2). while loop -->> The JavaScript while loop iterates the elements for the infinite number of times. It should be used if number of iteration is not known. 
                    while (condition) {  
                        code to be executed  
                    }  

3). do-while loop -->> The JavaScript do while loop iterates the elements for the infinite number of times like while loop. 
                       But, code is executed at least once whether condition is true or false. 
                       do{  
                          code to be executed  
                      }while (condition);  


4). for-in loop -->> The JavaScript for in loop is used to iterate the properties of an object.


for example :-- Check whether the no is prime or not -->>>
                                                      var flag = true;
                                                      var n = 11;
                                                      for(let i = 2 ; i < n ;i++){
                                                          if(n % i == 0){
                                                              flag = false;
                                                              break
                                                          }
                                                      }
                                                      if(flag){
                                                          console.log('prime');
                                                      }else{
                                                          console.log("not prime")
                                                      }



***************************************************************************** control statement ***********************************************************************


Javascript control statement is used to control the flow of program based on the specified condition.

1). If Statement -->> If statement is used to execute a block of statements if specified condition is true.


2). If else statement -->> If else statement is used to execute either of two block of statements depends upon the condition. 
                           If condition is true then if block will execute otherwise else block will execute.


3). if else if statement -->> If else statement is used to execute one block of statements from many depends upon the condition. 
                              If condition1 is true then block of statements1 will be executed, else if condition2 is true block of statements2 is executed and so on.
                              If no condition is true, then else block of statements will be executed.


For example -->>> 
                let num=3;  
                if(num==1){  
                    console.log("JavaScript Statement 1");  
                }  
                else if(num==2){  
                    console.log("JavaScript Statement 2");  
                }  
                else if(num==3){  
                    console.log("JavaScript Statement 3");  
                }  
                else{  
                    console.log("JavaScript Statement n");  
                } 



******************************************************************************** control statement *********************************************************************


































            
