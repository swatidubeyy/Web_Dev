*****************************************************************************Objects**********************************************************************************


JavaScript is an object-based language. Everything is an object in JavaScript.
A javaScript object is an entity having state and behavior (properties and method). For example: car, pen, bike, chair, glass, keyboard, monitor etc.
JavaScript is template based not class based. Here, we don't create class to get the object. But, we direct create objects.

In real life, a car is an object.
A car has properties like weight and color, and methods like start and stop:
All cars have the same properties, but the property values differ from car to car.
All cars have the same methods, but the methods are performed at different times.

It is a common practice to declare objects with the const keyword.

const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
Spaces and line breaks are not important. An object definition can span multiple lines:


You can access object properties in two ways: --->>>
                                                    objectName.propertyName(Dot property)
                                                              or
                                                    objectName["propertyName"] (Bracket notations)
                                                    
                                                    
                                        Example1 ---->>>
                                                        person.lastName;
                                                        
                                        Example2 ----->>>>
                                                        person["lastName"];
                                                        
        
        
        
        
*****************************************************************************exercise*********************************************************************************
  
Here we will do an exercise to understanding deeply .....
                                            
                                            
let captain = {
       firstName : 'Steve',                                                     // can store string
       lastName : 'Rogers',                                                     // can store string
       friends: ['Bucky' , 'Tony Stark' , 'Dr Banner'],                         // can store array
       isAvenger : true,                                                       // can store boolean
       age:150,                                                               // can store number
       address:{                                                              // can store object in object
              state : 'New York',
              city : "Manhatten"
       },
        sayHi : function fn(){                                               // can store function
              console.log('Cap says Hi')
       },  
}





Print object --->>> 
                  console.log(captain) 
                  
                  O/P =   {
                            firstName: 'Steve',
                            lastName: 'Rogers',
                            friends: [ 'Bucky', 'Tony Stark', 'Dr Banner' ],
                            isAvenger: true,
                            age: 150,
                            address: { state: 'New York', city: 'Manhatten' },
                            sayHi: [Function: fn]
                          }
                  
                  

Dot notation ---->>>
                    console.log(captain.friends)
                    O/P = [ 'Bucky', 'Tony Stark', 'Dr Banner' ]
                    

Bracket Notation---->>>
                    console.log(captain['age'])
                    O/P = [ 'Bucky', 'Tony Stark', 'Dr Banner' ]
                    

to access function property --->>>> 
                    captain.sayHi() // cap says hi
                    O/P = Cap says Hi
                    

update object ---->>>
                    captain.isAvenger = 'False'
                    console.log(captain)
                    O/P = {
                            firstName: 'Steve',
                            lastName: 'Rogers',
                            friends: [ 'Bucky', 'Tony Stark', 'Dr Banner' ],
                            isAvenger: 'false',
                            age: 150,
                            address: { state: 'New York', city: 'Manhatten' },
                            sayHi: [Function: fn]
                          }
                    

create something inside an object ---->>>
                    captain.movies = ['first Avenger' , "Age of Ultron" , 'Endgame']
                    console.log(captain)
                    O/P = {
                            firstName: 'Steve',
                            lastName: 'Rogers',
                            friends: [ 'Bucky', 'Tony Stark', 'Dr Banner' ],
                            isAvenger: true,
                            age: 150,
                            address: { state: 'New York', city: 'Manhatten' },
                            sayHi: [Function: fn],
                            movies: [ 'first Avenger', 'Age of Ultron', 'Endgame' ]
                          }
                    

delete a property ---->>>>>>>>
                    delete captain.age 
                    console.log(captain)
                    O/P = {
                            firstName: 'Steve',
                            lastName: 'Rogers',
                            friends: [ 'Bucky', 'Tony Stark', 'Dr Banner' ],
                            isAvenger: true,
                            address: { state: 'New York', city: 'Manhatten' },
                            sayHi: [Function: fn]
                          }
                    
                    

special loop (For in loop) ----->>>
                          for(let key in captain){
                              console.log("key ->",key , " , value -> " , captain[key])
                          }
                    
                    O/P = key -> firstName  , value ->  Steve
                          key -> lastName  , value ->  Rogers
                          key -> friends  , value ->  [ 'Bucky', 'Tony Stark', 'Dr Banner' ]
                          key -> isAvenger  , value ->  true
                          key -> age  , value ->  150
                          key -> address  , value ->  { state: 'New York', city: 'Manhatten' }
                          key -> sayHi  , value ->  [Function: fn]
                                                        




***************************************************************Creating Objects in JavaScript************************************************************************************


There are 3 ways to create objects. --->>>  
                                            1) By array literal
                                            2) By creating instance of Array directly (using new keyword)
                                            3) By using an Array constructor (using new keyword)
                                            
                                            
                                            
                           
      1) JavaScript Object by object literal --->>>
                                              The syntax of creating object using object literal is given below:

                                              object={property1:value1,property2:value2.....propertyN:valueN}  
                                              As you can see, property and value is separated by : (colon).

                                   example 1 --->>>
                                                <script>  
                                                emp={id:102,name:"Shyam Kumar",salary:40000}  
                                                document.write(emp.id+" "+emp.name+" "+emp.salary);  
                                                </script>  
                                                Test it Now
                                  output --->>>
                                                102 Shyam Kumar 40000
                                                
                                                
                                                
                                  example 2 --->>>                                                                                                                                                 
                                                  Example
                                                  const person = {
                                                    firstName: "John",
                                                    lastName: "Doe",
                                                    age: 50,
                                                    eyeColor: "blue"
                                                  };





      2) By creating instance of Object --->>>
                                              The syntax of creating object directly is given below:

                                              var objectname=new Object();  
                                              Here, new keyword is used to create object.

                                    example --->>>
                                                  <script>  
                                                  var emp=new Object();  
                                                  emp.id=101;  
                                                  emp.name="Ravi Malik";  
                                                  emp.salary=50000;  
                                                  document.write(emp.id+" "+emp.name+" "+emp.salary);  
                                                  </script>  
                                                  Test it Now
                                     Output --->>>
                                                  101 Ravi 50000
                                                  
                                           
                                           
                                           
                                                  
      3) By using an Object constructor --->>> 
                                              Here, you need to create function with arguments.
                                              Each argument value can be assigned in the current object by using this keyword.
                                              The this keyword refers to the current object.

                                     example ---->>>
                                                  <script>  
                                                  function emp(id,name,salary){  
                                                  this.id=id;  
                                                  this.name=name;  
                                                  this.salary=salary;  
                                                  }  
                                                  e=new emp(103,"Vimal Jaiswal",30000);  

                                                  document.write(e.id+" "+e.name+" "+e.salary);  
                                                  </script>  
                                                  Test it Now
                                      Output --->>>
                                                  103 Vimal Jaiswal 30000
                                                  Defining method in JavaScript Object
                                                  We can define method in JavaScript object. 
                                                  But before defining method, we need to add property in the function with same name as method.

                                              The example of defining method in object is given below.

                                              <script>  
                                              function emp(id,name,salary){  
                                              this.id=id;  
                                              this.name=name;  
                                              this.salary=salary;  

                                              this.changeSalary=changeSalary;  
                                              function changeSalary(otherSalary){  
                                              this.salary=otherSalary;  
                                              }  
                                              }  
                                              e=new emp(103,"Sonoo Jaiswal",30000);  
                                              document.write(e.id+" "+e.name+" "+e.salary);  
                                              e.changeSalary(45000);  
                                              document.write("<br>"+e.id+" "+e.name+" "+e.salary);  
                                              </script>  
                                              Test it Now
                                              Output of the above example
                                              103 Sonoo Jaiswal 30000
                                              103 Sonoo Jaiswal 45000
                                              JavaScript Object Methods
                                              
                                              
                                              


*************************************************************************Methods	Description***************************************************************************
1	Object.assign() ---->>>>
                    This method is used to copy enumerable and own properties from a source object to a target object
                    
                    
2	Object.create()	---->>>>
                    This method is used to create a new object with the specified prototype object and properties.
                    
                    
3	Object.defineProperty() ---->>>>
                    This method is used to describe some behavioral attributes of the property.
                    

4	Object.defineProperties() ---->>>>
                    This method is used to create or configure multiple object properties.
                    

5	Object.entries() ---->>>>
                    This method returns an array with arrays of the key, value pairs.
                    

6	Object.freeze() ---->>>>
                    This method prevents existing properties from being removed.
                    

7	Object.getOwnPropertyDescriptor() ---->>>>
                    This method returns a property descriptor for the specified property of the specified object.
                    

8	Object.getOwnPropertyDescriptors() ---->>>>
                    This method returns all own property descriptors of a given object.
                    

9	Object.getOwnPropertyNames() ---->>>>
                    This method returns an array of all properties (enumerable or not) found.
                    

10	Object.getOwnPropertySymbols() ---->>>>
                    This method returns an array of all own symbol key properties.
                    

11	Object.getPrototypeOf()	---->>>>
                    This method returns the prototype of the specified object.
                    

12	Object.is()	---->>>>
                    This method determines whether two values are the same value.
                    

13	Object.isExtensible()		---->>>>
                    This method determines if an object is extensible.
                    

14	Object.isFrozen() ---->>>>
                    This method determines if an object was frozen.
                                        

15	Object.isSealed() ---->>>>
                    This method determines if an object is sealed.
                    

16	Object.keys() ---->>>>
                    This method returns an array of a given object's own property names.
                    

17	Object.preventExtensions() ---->>>>
                    This method is used to prevent any extensions of an object.
                    

18	Object.seal()		---->>>>
                    This method prevents new properties from being added and marks all existing properties as non-configurable.
                    

19	Object.setPrototypeOf() ---->>>>
                    This method sets the prototype of a specified object to another object.
                    

20	Object.values() ---->>>>
                    This method returns an array of values.
                    
  
  
  
  
  
  
  
*****************************************************************************What is this?*****************************************************************************


In JavaScript, the this keyword refers to an object.
Which object depends on how this is being invoked (used or called).

The this keyword refers to different objects depending on how it is used: ---->>>
                                                    In an object method, this refers to the object.
                                                    Alone, this refers to the global object.
                                                    In a function, this refers to the global object.
                                                    In a function, in strict mode, this is undefined.
                                                    In an event, this refers to the element that received the event.
                                                    Methods like call(), apply(), and bind() can refer this to any object.
                                                    
Note ---->>>>>
              this is not a variable. It is a keyword. You cannot change the value of this.

The this Keyword --->>>
                    In a function definition, this refers to the "owner" of the function.
                    In other words, this.firstName means the firstName property of this object.



