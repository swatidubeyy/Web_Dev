******************************************************************************* Array in JS ***************************************************************************************

An array is a special variable, which can hold more than one value.( const cars = ["Saab", "Volvo", "BMW" , true , 2, ]; )
In JS we can store any datatype of data in array.( no need of only similar data )

An array is a special type of variable, which can store multiple values using special syntax.
Every value is associated with numeric index starting with 0. 


An array in JavaScript can be defined and initialized in two ways -->>>

              1) array literal -->>> 
                                      var <array-name> = [element0, element1, element2,... elementN];
                                      It takes a list of values separated by a comma and enclosed in square brackets.

              2) Array constructor -->>> 
                                      var arrayName = new Array();
                                      var arrayName = new Array(Number length);
                                      var arrayName = new Array(element1, element2, element3,... elementN);
                                      
                                      You can initialize an array with Array constructor syntax using new keyword.
                                      
Note --->>>
            Array elements are accessed using their index number:
            Array indexes start with 0:

            [0] is the first array element
            [1] is the second
            [2] is the third ...                                      

******************************************************************************* Array Methods *****************************************************************************************



toString method --->>>
                     The JavaScript method toString() converts an array to a string of (comma separated) array values.

                      Example-->>
                              const fruits = ["Banana", "Orange", "Apple", "Mango"];
                              document.getElementById("demo").innerHTML = fruits.toString();
                              Result: Banana,Orange,Apple,Mango

            
            
            
join() method --->> 
                    it also joins all array elements into a string.
                    It behaves just like toString(), but in addition you can specify the separator:

                    Example -->>
                              const fruits = ["Banana", "Orange", "Apple", "Mango"];
                              document.getElementById("demo").innerHTML = fruits.join(" * ");
                              Result: Banana * Orange * Apple * Mango


Pop() method --->>> 
                    The pop() method removes the last element from an array:

                    Example --->>>
                                const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                fruits.pop();
                                The pop() method returns the value that was "popped out":



Push() method --->>> 
                    The push() method adds a new element to an array (at the end):

                    Example --->>>
                                const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                fruits.push("Kiwi");
                                The push() method returns the new array length:



shift() method --->>>
                      The shift() method removes the first array element and "shifts" all other elements to a lower index.
                      Shifting is equivalent to popping, but working on the first element instead of the last.
                      
                      Example --->>>
                                  const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                  fruits.shift();
                                  The shift() method returns the value that was "shifted out":



unshift() method --->>>
                        The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:

                        Example ---->>>
                                      const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                      fruits.unshift("Lemon");
                                      The unshift() method returns the new array length.


Changing( Replace ) Elements --->>>
                                  Array elements are accessed using their index number:
                                  Array indexes start with 0:----
                                                                [0] is the first array element
                                                                [1] is the second
                                                                [2] is the third ............

                                  Example ---->>>
                                                const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                                fruits[0] = "Kiwi";
                                                it will replace banana from kiwi


length method --->>> 
                      The length property provides an easy way to append a new element to an array:

                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                    fruits[fruits.length] = "Kiwi";


delete() method --->>> 
                        Using delete leaves undefined holes in the array.

                        Example --->>>
                                      const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                      delete fruits[0];
Warning ! ---->>>>
                  Array elements can be deleted using the JavaScript operator delete.
                  Using delete leaves undefined holes in the array.
                  Use pop() or shift() instead.






Merging (Concatenating) method --->>> 
                                  The concat() method does not change the existing arrays. It always returns a new array.
                                  The concat() method creates a new array by merging (concatenating) existing arrays:
                                  Example (Merging Two Arrays) --->>>
                                                                    const myGirls = ["Cecilie", "Lone"];
                                                                    const myBoys = ["Emil", "Tobias", "Linus"];

                                                                    const myChildren = myGirls.concat(myBoys);
                                                                      

                                  The concat() method can take any number of array arguments:
                                  Example (Merging Three Arrays) --->>>
                                                                    const arr1 = ["Cecilie", "Lone"];
                                                                    const arr2 = ["Emil", "Tobias", "Linus"];
                                                                    const arr3 = ["Robin", "Morgan"];
                                                                    const myChildren = arr1.concat(arr2, arr3);
                                                                    
                                                                    
                                  The concat() method can also take strings as arguments:
                                  Example (Merging an Array with Values) --->>>
                                                                        const arr1 = ["Emil", "Tobias", "Linus"];
                                                                        const myChildren = arr1.concat("Peter"); 



splice() method --->>>
                      The splice() method adds new items to an array.
                      The splice() method can be used to add new items to an array:
                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                    fruits.splice(2, 0, "Lemon", "Kiwi");
                                    
                                    The first parameter (2) defines the position where new elements should be added (spliced in).
                                    The second parameter (0) defines how many elements should be removed.
                                    The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.



                      The splice() method returns an array with the deleted items:
                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                    fruits.splice(2, 2, "Lemon", "Kiwi");
                                    
                                    
                                    
                      Using splice() to Remove Elements
                      With clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array:
                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                    fruits.splice(0, 1);
                                    
                                    The first parameter (0) defines the position where new elements should be added (spliced in).
                                    The second parameter (1) defines how many elements should be removed.
                                    The rest of the parameters are omitted. No new elements will be added.




slice() method --->>> 
                      The slice() method slices out a piece of an array into a new array.
                      The slice() method slices out a piece of an array.
                      This example slices out a part of an array starting from array element 1 ("Orange"):
                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
                                    const citrus = fruits.slice(1);               
                      
                      
                      
                      The slice() method creates a new array.
                      The slice() method does not remove any elements from the source array.
                      This example slices out a part of an array starting from array element 3 ("Apple"):
                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
                                    const citrus = fruits.slice(3);
                                 
                                 
                                    
                      The slice() method can take two arguments like slice(1, 3).
                      The method then selects elements from the start argument, and up to (but not including) the end argument.
                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
                                    const citrus = fruits.slice(1, 3);
                                    
                                    
                                    
                      If the end argument is omitted, like in the first examples, the slice() method slices out the rest of the array.
                      Example --->>>
                                    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
                                    const citrus = fruits.slice(2);



Automatic toString() method --->>>
                                  JavaScript automatically converts an array to a comma separated string when a primitive value is expected.
                                  This is always the case when you try to output an array.
                                  These two examples will produce the same result:
                                  
                                  Example --->>>                           
                                                const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                                document.getElementById("demo").innerHTML = fruits.toString();
                                  Example --->>>
                                                const fruits = ["Banana", "Orange", "Apple", "Mango"];
                                                document.getElementById("demo").innerHTML = fruits;
                                                
                                                
                                  Note --->>>>
                                               All JavaScript objects have a toString() method.



Finding Max and Min Values in an Array --->>>
                                              There are no built-in functions for finding the highest or lowest value in a JavaScript array.
                                              
                                              
                                              
                                              
                                              
                                              
